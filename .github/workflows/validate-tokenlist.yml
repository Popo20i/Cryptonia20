name: 🚀 Validate Cryptonia20 (CT20) Token List JSON

on:
  push:
    paths:
      - 'src/cryptonia20.tokenlist.json'
  pull_request:
    paths:
      - 'src/cryptonia20.tokenlist.json'
  workflow_dispatch: {}

jobs:
  validate-json:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate JSON syntax
        run: |
          echo "✅ Validating JSON syntax..."
          python3 -m json.tool src/cryptonia20.tokenlist.json > /dev/null
          echo "Syntax is valid."

      - name: Validate required fields and structure
        run: |
          echo "🔍 Checking required fields and extensions..."
          python3 <<'EOF'
          import json, sys

          try:
              with open('src/cryptonia20.tokenlist.json') as f:
                  data = json.load(f)
          except Exception as e:
              print(f"❌ Failed to load JSON: {str(e)}")
              sys.exit(1)

          # Required root fields
          required_root = ["name", "timestamp", "version", "tokens"]
          for field in required_root:
              if field not in data:
                  print(f"❌ Missing root field: {field}")
                  sys.exit(1)

          # Version format
          if not all(k in data["version"] for k in ["major", "minor", "patch"]):
              print("❌ Version must have major, minor, and patch fields")
              sys.exit(1)

          # Tokens validation
          if not isinstance(data["tokens"], list):
              print("❌ 'tokens' must be a list")
              sys.exit(1)

          if len(data["tokens"]) == 0:
              print("❌ 'tokens' list cannot be empty")
              sys.exit(1)

          # Token fields validation
          required_token_fields = ["chainId", "address", "name", "symbol", "decimals"]
          for token in data["tokens"]:
              for field in required_token_fields:
                  if field not in token:
                      print(f"❌ Missing token field '{field}' in token: {token.get('symbol', 'unknown')}")
                      sys.exit(1)

              # Validate address format (basic check)
              if not token["address"].startswith("0x") or len(token["address"]) != 42:
                  print(f"❌ Invalid address format for token: {token['symbol']}")
                  sys.exit(1)

              # Validate decimals is a number
              if not isinstance(token["decimals"], int):
                  print(f"❌ Decimals must be an integer for token: {token['symbol']}")
                  sys.exit(1)

          print("🎉 All checks passed! JSON structure is valid.")
          EOF

      - name: Validate logoURI accessibility (optional)
        if: always()  # Runs even if previous steps fail
        run: |
          echo "🖼️ Checking logoURI accessibility..."
          python3 <<'EOF'
          import requests
          import json

          try:
              with open('src/cryptonia20.tokenlist.json') as f:
                  data = json.load(f)
              
              for token in data["tokens"]:
                  if "logoURI" in token:
                      try:
                          response = requests.head(token["logoURI"], timeout=10)
                          if response.status_code != 200:
                              print(f"⚠️ logoURI not accessible (HTTP {response.status_code}): {token['logoURI']}")
                      except Exception as e:
                          print(f"⚠️ Could not verify logoURI: {str(e)}")
          except:
              pass  # Skip if JSON is invalid
          EOF